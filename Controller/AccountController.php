<?php
/*
 * This file is part of the Sulu CMS.
 *
 * (c) MASSIVE ART WebServices GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Massive\Bundle\ContactBundle\Controller;

use Doctrine\Common\Persistence\ObjectManager;
use Sulu\Bundle\ContactBundle\Controller\AccountController as SuluAccountController;
use Sulu\Bundle\ContactBundle\Entity\AccountInterface;
use Sulu\Component\Rest\Exception\EntityNotFoundException;
use Symfony\Component\HttpFoundation\Request;
use Sulu\Bundle\ContactBundle\Entity\Contact as ContactEntity;

class AccountController extends SuluAccountController
{
    public function cgetAction(Request $request)
    {
        return parent::cgetAction($request); // TODO: Change the autogenerated stub
    }

    protected function doPost(Request $request)
    {
        $account = parent::doPost($request);
        $this->setResponsiblePerson($this->getDoctrine()->getManager(), $account, $request->get('responsiblePerson'));

        return $account;
    }

    protected function doPut(AccountInterface $account, Request $request)
    {
        parent::doPut($account, $request);
        $this->setResponsiblePerson($this->getDoctrine()->getManager(), $account, $request->get('responsiblePerson'));
    }

    /**
     * set responsible person from request data to account
     * @param ObjectManager $em
     * @param AccountInterface $account
     * @param $responsiblePerson
     * @throws EntityNotFoundException
     */
    private function setResponsiblePerson(ObjectManager $em, AccountInterface $account, $responsiblePerson)
    {
        if (!!$responsiblePerson) {
            $id = $responsiblePerson['id'];
            /* @var ContactEntity $contact */
            $contact = $em->getRepository(self::$contactEntityName)->find($id);

            if (!$contact) {
                throw new EntityNotFoundException(self::$contactEntityName, $id);
            }
            $account->setResponsiblePerson($contact);
        }
    }
}
